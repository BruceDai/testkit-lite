    Installation
    =================
   
    Before installation, please make sure a basic packages python have been installed;
    
        Install from source code: 
            python setup.py build && python setup.py install
            
        Build RPM for testkit-lite:
        
            Step1: truncate file "/usr/lib/rpm/brp-python-bytecompile", becasue of bug https://bugzilla.redhat.com/show_bug.cgi?id=236535;
            
                :>/usr/lib/rpm/brp-python-bytecompile
                
            Step2: build RPM
            
                python setup.py bdist_rpm
                
            Step3: install testkit-lite
            
                rpm  -ivh dist/testkit-lite-xxxx.noarch.rpm
                
                if your system doesn't support 'rpm -ivh', you can install it as follows:
                    1): Copy 'testkit-lite-X.X.X-X.noarch.rpm' to <somewhere>
                    2): Execute 'rpm2cpio <somewhere>/testkit-lite-X.X.X-X.noarch.rpm | cpio ¨Cidmv'
                    3): Execute 'cp -r <somewhere>/usr/* /usr/'
                    4): Execute 'cp -r <somewhere>/opt/* /opt/'

    Quick Start:
    =================

    At first, prepare one tests.xml file aligned with schema files: /opt/testkit/lite/xsd/testdefinition-syntax.xsd.

    And then,

        1) You can select on parser engine to simply conduct one or more tests.xml:
            testkit-lite -f <somewhere>/tests.xml
    
        2) If you just want to get the statistic (such as the testcases number or the structure), dryrun could help:
            testkit-lite -f tests.xml -D
    
        3) If you want to execute both auto and manual tests:
            testkit-lite -f tests.xml
    
        4) If you just want to execute manual tests:
            testkit-lite -f tests.xml -M
    
        5) If you just want to execute auto tests:
            testkit-lite -f tests.xml -A
    
        6) If you want to save test result to another file, by default it'll be under /opt/testkit/lite/latest:
            testkit-lite -f tests.xml -o <somewhere>
    
        7) If you want to choose some filters:
            testkit-lite -f tests.xml --status level1 --type type1 ...
    
        8) If you want to run Web API test:
            testkit-lite -f /usr/share/webapi-webkit-tests/tests.xml -e "WRTLauncher webapi-webkit-tests" -o /tmp/wekit-tests-result.xml
    
        9) If you want to run Web API test in full screen mode:
            testkit-lite -f /usr/share/webapi-webkit-tests/tests.xml -e "WRTLauncher webapi-webkit-tests" -o /tmp/wekit-tests-result.xml --fullscreen
    
        10) At last, you can freely compose the above parameters together:
            testkit-lite -f <somewhere1>/tests.xml <somewhere2>/tests.xml -A --priority P1 --type type1 ...

    Get Results:
    =================
    Two kinds of test report will be generated:
        1) <tests xml name>.result.txt
        example:
            ===================================TestReport===================================
                                                                       TYPE PASS FAIL  N/A
            ---/usr/share/mnts1.0-distromisc-test/tests.xml             XML    0    0   24
               `---Distro Misc                                        SUITE    0    0   24
                   |---General shortkeys                                SET    0    0    2
                   |   |---general_shortkeys_console_switch            CASE    0    0    1
                   |   `---general_shortkeys_standard_shortkeys        CASE    0    0    1
                   |---Linux Usability                                  SET    0    0    4
                   |   |---linux_usability_common_commands             CASE    0    0    1
                   |   |---linux_usability_default_app_and_MIME        CASE    0    0    1
                   |   |---linux_usability_gconf_database              CASE    0    0    1
                   |   `---linux_usability_security_usability          CASE    0    0    1
                   |---Log system                                       SET    0    0    4
                   |   |---log_system_UI_process                       CASE    0    0    1
                   |   |---log_system_monitor_log_access               CASE    0    0    1
                   |   |---log_system_process_pulseaudio_daemon        CASE    0    0    1
                   |   `---log_system_sreadhead                        CASE    0    0    1
                   |---Non-defult integrated applications               SET    0    0    3
                   |   |---non_default_apps_installation               CASE    0    0    1
                   |   |---non_default_apps_sanity_check               CASE    0    0    1
                   |   `---non_default_apps_uninstallation             CASE    0    0    1
                   |---Package check                                    SET    0    0    3
                   |   |---package_check_core_debuginfo                CASE    0    0    1
                   |   |---package_check_core_dependency               CASE    0    0    1
                   |   `---package_check_core_version                  CASE    0    0    1
                   |---Peripheral Devices                               SET    0    0    6
                   |   |---peripheral_devices_automount                CASE    0    0    1
                   |   |---peripheral_devices_external_bluetooth       CASE    0    0    1
                   |   |---peripheral_devices_external_cdrom           CASE    0    0    1
                   |   |---peripheral_devices_usb_hotplug              CASE    0    0    1
                   |   |---peripheral_devices_usb_hub                  CASE    0    0    1
                   |   `---peripheral_devices_usb_mount_umount         CASE    0    0    1
                   `---User actions on the stage of system boot-up      SET    0    0    2
                       |---user_actions_at_bootup_keyboard_operations  CASE    0    0    1
                       `---user_actions_at_bootup_mouse_operations     CASE    0    0    1

        2) <tests xml name>.result.xml
            xml result files aligned with schema files: /opt/testkit/lite/xsd/
        example: <ignore>

    The result will be under /opt/testkit/lite/latest after execution, you can also check the history results in /opt/testkit/lite/yyyy-mm-dd-HH:MM:SS.NNNNNN.

    Notes:
    =================
    testkit-lite's TestLog is stored to /opt/testkit/lite/latest
    testkit-lite enables both automatic and manual tests by default
    Obviously -A and -M are conflict options
    -e option does not support -D mode

    Detail Options:
    =================
    Options:

      Common options:
        -f, --testxml             Specify the test.xml, support multiple test.xml
        -D, --dryrun              Dry-run the selected test cases
        -A, --auto-only           Enable only auto tests
        -M, --manual-only         Enable only manual tests
        -E  <engine name>         Specify a test engine
        -o RESULTFILE, --output=RESULTFILE
                                  Specify output file for result xml
        -e                        Launch external test with an executable file
        --fullscreen              Run Web API test in full screen mode
        -h, --help                Show this help message and exit

      Filters options:
        All filters options are multiple-valued and optional
         --suite                  Select the specified white-rules
         --set                    Select the specified white-rules
         --id                     Select the specified white-rules
         --component              Select the specified white-rules
         --status                 Select the specified white-rules
         --type                   Select the specified white-rules
         --priority               Select the specified white-rules
         --category               Select the specified white-rules

Examples:
    1): testkit-lite -f /usr/share/webapi-w3c-device-tests/tests.xml -e "WRTLauncher webapi-w3c-device-tests" --set Battery
    2): testkit-lite -f /usr/share/webapi-w3c-device-tests/tests.xml -e "WRTLauncher webapi-w3c-device-tests" --priority P1 -o /tmp/webapi-w3c-device-tests.xml
