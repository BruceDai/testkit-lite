    Installation
    =================
   
    Before installation, please make sure a basic packages python have been installed;
    
        Install from source code: 
            python setup.py build && python setup.py install
    
        Build RPM for testkit-lite (suggest to build on Fedora):
        
            Step1: truncate file "/usr/lib/rpm/brp-python-bytecompile", becasue of bug https://bugzilla.redhat.com/show_bug.cgi?id=236535;

                :>/usr/lib/rpm/brp-python-bytecompile

            Step2: build RPM

                python setup.py bdist_rpm 

            Step3: install testkit-lite
            
                rpm  -ivh dist/testkit-lite-xxxx.noarch.rpm

    Quick Start:
    =================

    At first, prepare one tests.xml file aligned with schema files: /opt/testkit/lite/xsd/testdefinition-syntax.xsd.

    And then,

        1) You can select on parser engine to simply conduct one or more tests.xml:
            testkit-lite -f <somewhere>/tests.xml
    
        2) If you just want to get the statistic (such as the testcases number or the structure), dryrun could help:
            testkit-lite -f tests.xml -D
    
        3) If you want to execute auto tests:
            testkit-lite -f tests.xml
    
        4) If you just want to execute manual tests:
            testkit-lite -f tests.xml -M
    
        5) If you want to execute all the auto and manual tests:
            testkit-lite -f tests.xml -A
    
        6) If you just want to execute the significant tests:
            testkit-lite -f tests.xml -S
    
        7) If you want to choose some filters:
            testkit-lite -f tests.xml --status level1 level2 --type type1 type2 --Ntestcase gfx1 gfx2...
        Note that the test cases will be filtered out by both black rules and white rules.
    
	8) If you want to run Web API test:
	    testkit-lite -f /usr/share/webapi-webkit-tests/tests.xml -e 'WRTLauncher webapi-webkit-tests' -o ./wekit-tests-result.xml --priority P0 P1 --status ready designed 

        9) At last, you can freely compose the above paramters together and use "-E" option to select specific test engine:
            testkit-lite -E tizen -f tests1.xml -D -A -S -C --level level1 level2 --type type1 type2 ...
    
        10) One more parameter is prepared for customized compatible mode for test report:
            testkit-lite -E tizen -f tests.xml -C

    Get Results:
    =================
    Two kinds of test report will be generated:
        1) <tests xml name>.result.txt
        example:
            ===================================TestReport===================================
                                                                       TYPE PASS FAIL  N/A
            ---/usr/share/mnts1.0-distromisc-test/tests.xml             XML    0    0   24
               `---Distro Misc                                        SUITE    0    0   24
                   |---General shortkeys                                SET    0    0    2
                   |   |---general_shortkeys_console_switch            CASE    0    0    1
                   |   `---general_shortkeys_standard_shortkeys        CASE    0    0    1
                   |---Linux Usability                                  SET    0    0    4
                   |   |---linux_usability_common_commands             CASE    0    0    1
                   |   |---linux_usability_default_app_and_MIME        CASE    0    0    1
                   |   |---linux_usability_gconf_database              CASE    0    0    1
                   |   `---linux_usability_security_usability          CASE    0    0    1
                   |---Log system                                       SET    0    0    4
                   |   |---log_system_UI_process                       CASE    0    0    1
                   |   |---log_system_monitor_log_access               CASE    0    0    1
                   |   |---log_system_process_pulseaudio_daemon        CASE    0    0    1
                   |   `---log_system_sreadhead                        CASE    0    0    1
                   |---Non-defult integrated applications               SET    0    0    3
                   |   |---non_default_apps_installation               CASE    0    0    1
                   |   |---non_default_apps_sanity_check               CASE    0    0    1
                   |   `---non_default_apps_uninstallation             CASE    0    0    1
                   |---Package check                                    SET    0    0    3
                   |   |---package_check_core_debuginfo                CASE    0    0    1
                   |   |---package_check_core_dependency               CASE    0    0    1
                   |   `---package_check_core_version                  CASE    0    0    1
                   |---Peripheral Devices                               SET    0    0    6
                   |   |---peripheral_devices_automount                CASE    0    0    1
                   |   |---peripheral_devices_external_bluetooth       CASE    0    0    1
                   |   |---peripheral_devices_external_cdrom           CASE    0    0    1
                   |   |---peripheral_devices_usb_hotplug              CASE    0    0    1
                   |   |---peripheral_devices_usb_hub                  CASE    0    0    1
                   |   `---peripheral_devices_usb_mount_umount         CASE    0    0    1
                   `---User actions on the stage of system boot-up      SET    0    0    2
                       |---user_actions_at_bootup_keyboard_operations  CASE    0    0    1
                       `---user_actions_at_bootup_mouse_operations     CASE    0    0    1

        2) <tests xml name>.result.xml
            xml result files aligned with schema files: /opt/testkit/lite/xsd/
        example: <ignore>

    The result will be under /opt/testkit/lite/latest after execution, you can also check the history results in /opt/testkit/lite/yyyy-mm-dd-HH:MM:SS.NNNNNN.


    Notes:
    =================
    testkit-lite's TestLog is stored to /opt/testkit/lite/latest
    testkit-lite enables only automatic tests by default
    Obviously -A and -M are conflict options.


    Detail Options:
    =================
    Options:

      Common options:
        -f, --testxmls            Specify the test.xml, support multi test.xml
                                  Refer to --testxmlconfig to add by filelist
        -D, --dryrun              Dry-run the selected test cases
        -A, --auto-and-manual     Enable both automatic and manual tests
        -T, --stripresultxml      To strip those non-executed cases from result xml
        -E  <engine name>         Specify a test engine
        -o RESULTFILE, --output=RESULTFILE
                                  Specify output file for result xml
        -r REPORTERNAME, --reporter=REPORTERNAME
                                  Specify external reporter for publishing result
  	--fullscreen              Run Web API test in full screen mode
        -h, --help                Show this help message and exit

      Filters options:
        All filters options are multiple-valued and optional
         --testsuite              Select the specified white-rules 
         --testset                Select the specified white-rules 
         --testcase               Select the specified white-rules 
         --component              Select the specified white-rules
         --status                 Select the specified white-rules 
         --type                   Select the specified white-rules 
         --priority               Select the specified white-rules
         --category               Select the specified white-rules
         --domain                 Select "tizen" specified white-rules
         --level                  Select "tizen" specified white-rules 
         --requirement            Select "tizen" specified white-rules 
         --environment            Select "tizen" specified white-rules
         --significant-only,-S    Select "tizen" specified white-rules
         --feature                Select "tizen" specified white-rules
         --subfeature             Select "tizen" specified white-rules

         --Ntestsuite             Select the specified black-rules 
         --Ntestset               Select the specified black-rules
         --Ntestcase              Select the specified black-rules 
         --Ncomponent             Select the specified black-rules
         --Nstatus                Select the specified black-rules 
         --Ntype                  Select the specified black-rules 
         --Npriority              Select the specified black-rules 
         --Ncategory              Select the specified black-rules
         --Ndomain                Select "tizen" specified black-rules 
         --Nlevel                 Select "tizen" specified black-rules 
         --Nrequirement           Select "tizen" specified black-rules 
         --Nenvironment           Select "tizen" specified black-rules 
         --Nsignificant-only      Select "tizen" specified black-rules 
         --Nfeature               Select "tizen" specified black-rules 
         --Nsubfeature            Select "tizen" specified black-rules 
Examples:
    1): testkit-lite -A --category Netbook IVI --priority P0 P1 --status ready approved –f /usr/share/tts-bluez-tests/tests.xml -o ~/tts-bluez-tests.result.xml
    2): testkit-lite -A --category Netbook IVI --priority P0 P1 --status ready approved --type functional_positive  --fullscreen –e “WRTLauncher webapi-webkit-tests” –f /usr/share/webapi-webkit-tests/tests.xml -o ~/webapi-webkit-tests.result.xml
